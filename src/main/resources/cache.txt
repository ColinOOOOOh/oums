<!-- 	配置Hibernate 的SessionFactory实例 : 通过Spring 提供的LocalSessionFactoryBean  -->
	<!-- 		进行配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 配置数据源属性 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置Hibernate配置文件的位置及名称 -->
		<!-- <property name="configLocation" value="classpath:hibernate.cfg.xml"/> -->
		<!-- 使用HIbernateProperties 属性来配置Hibernate原生的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 配置Hibernate映射文件的位置及名称， 可以使用通配符 -->
		<property name="mappingLocations"
			value="classpath:com/tz/spring/hibernate/entities/*.hbm.xml" />
		<!-- <property name="mappingLocations" value="classpath:com/tz/spring/hibernate/entities/Book.hbm.xml"/> -->
		<!-- <property name="mappingLocations" value="classpath:com/tz/spring/hibernate/entities/Account.hbm.xml"/> -->
	</bean>

	<!-- 配置Spring 的声明式事务 -->
	<!-- 1配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 2配置事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<!-- propagation指定传播行为，现在各种事务 -->
			<tx:method name="purchase" propagation="REQUIRES_NEW" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 3配置事务切点，并把切点和事务属性关联起来 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.tz.spring.hibernate.service.*.*(..))"
			id="txPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
		
	jdbc.user=root
jdbc.password=123
jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.jdbcUrl=jdbc\:mysql\:///oums
jdbc.initPoolSize=0
jdbc.maxPoolSize=20
